name: Fetch Movies Data with Cast Information

on:
  schedule:
    - cron: '0 */4 * * *'  # Runs every 4 hours
  workflow_dispatch:  # Allow manual triggering

jobs:
  fetch-movies:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch movies and cast information
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          mkdir -p movies_data

          # Initialize the JSON structure
          echo '{"results":[' > movies_data/movies.json

          # Fetch up to 250 pages (5000 movies max, 20 per page)
          for page in $(seq 1 250); do
            echo "Fetching movies for page $page..."
            movie_response=$(curl -s "https://api.themoviedb.org/3/discover/movie?api_key=$TMDB_API_KEY&page=$page")

            # Validate the API response
            if ! echo "$movie_response" | jq empty; then
              echo "Error: Invalid JSON response for page $page."
              echo "Response: $movie_response"
              exit 4
            fi

            # Extract movies from the response
            movies=$(echo "$movie_response" | jq -c '.results[]')

            # Loop through each movie in the page to fetch cast information
            for movie in $movies; do
              movie_id=$(echo "$movie" | jq -r '.id')
              credits=$(curl -s "https://api.themoviedb.org/3/movie/$movie_id/credits?api_key=$TMDB_API_KEY")

              # Validate the credits response
              if ! echo "$credits" | jq empty; then
                echo "Error: Invalid JSON response for movie ID $movie_id."
                continue
              fi

              # Extract top 5 cast members
              cast=$(echo "$credits" | jq -c '[.cast[] | {name: .name}] | map(.name) | .[:5]')
              if [ $? -ne 0 ]; then
                echo "Error: Failed to process credits for movie ID $movie_id."
                continue
              fi

              # Merge cast into movie object
              echo "$movie" | jq --argjson cast "$cast" '. + {cast: $cast}' >> movies_data/tmp_movies.json
            done
          done

          # Combine all results into a valid JSON structure
          if [ -f movies_data/tmp_movies.json ]; then
            jq -s '{results: .}' movies_data/tmp_movies.json > movies_data/movies.json
            rm movies_data/tmp_movies.json
          else
            echo "Error: No movies data was fetched."
            exit 4
          fi

      - name: Validate JSON
        run: jq . movies_data/movies.json > /dev/null || { echo "Invalid JSON"; exit 1; }

      - name: Commit and push movie data
        run: |
          git config user.name "tdbnz-coding"
          git config user.email "bise@smartbusiness.me"
          git add movies_data/movies.json
          git commit -m "Update movies data with 5000 movies"
          git push origin main