name: Fetch Movies Data with Encryption

on:
  schedule:
    - cron: '0 */4 * * *'  # Runs every 4 hours
  workflow_dispatch:  # Allow manual triggering

jobs:
  fetch-movies:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Fetch movies from TMDB API
      - name: Fetch movies
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          mkdir -p movies_data

          # Initialize the JSON structure
          echo '{"results":[' > movies_data/movies.json

          # Fetch up to 250 pages (5000 movies max, 20 per page)
          for page in $(seq 1 250); do
            echo "Fetching movies for page $page..."

            # Fetch movies with retry and logging
            for attempt in {1..3}; do
              movie_response=$(curl -s "https://api.themoviedb.org/3/discover/movie?api_key=$TMDB_API_KEY&page=$page")

              # Validate the response to check if it's valid JSON
              if echo "$movie_response" | jq empty > /dev/null 2>&1; then
                break
              else
                echo "Warning: Invalid or empty response for page $page. Retrying... ($attempt/3)"
                sleep 5
              fi
            done

            # If the response is still invalid after retries, exit with error
            if ! echo "$movie_response" | jq empty > /dev/null 2>&1; then
              echo "Error: Failed to fetch valid data for page $page after 3 attempts. Exiting..."
              exit 4
            fi

            # Append movie results to temporary file
            echo "$movie_response" | jq -c '.results[]' >> movies_data/tmp_movies.json
          done

          # Combine all results into a valid JSON structure
          if [ -f movies_data/tmp_movies.json ]; then
            jq -s '{results: .}' movies_data/tmp_movies.json > movies_data/movies.json
            rm movies_data/tmp_movies.json
          else
            echo "Error: No movies data was fetched."
            exit 4
          fi

      # Step 3: Encrypt JSON recursively in Base64
      - name: Encrypt JSON file 999 times
        run: |
          if [ -f movies_data/movies.json ]; then
            cp movies_data/movies.json movies_data/movies_encrypted.json
            for i in $(seq 1 999); do
              # Encode the file in Base64 and overwrite it
              cat movies_data/movies_encrypted.json | base64 > movies_data/tmp.json
              mv movies_data/tmp.json movies_data/movies_encrypted.json
              echo "Encryption pass $i completed."
            done
            echo "movies_encrypted.json has been encrypted 999 times."

            # Delete the original unencrypted JSON file
            rm movies_data/movies.json
            echo "Unencrypted JSON file deleted."
          else
            echo "movies.json not found. Exiting..."
            exit 1
          fi

      # Step 4: Commit and push the encrypted file
      - name: Commit and push encrypted movie data
        run: |
          git config user.name "tdbnz-coding"
          git config user.email "bise@smartbusiness.me"
          git add movies_data/movies.json
          git commit -m "Update movies & Encrypt"
          git push origin main

